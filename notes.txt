# INTRODUCCION VUE

## Directivas de vue:
-- v-text: permite agregar texto a una etiqueta

-- v-once: modifica la renderizacion reactiva y el elemento solo se renderiza una vez y no permite modificar el elemento

-- v-html: funciona parecido a v-text solo que esta directiva adminte etiquetas HTML dentro del contenido (No es recomendable renderizar input con esta directiva por seguridad)

## Atributos reactivos
-- v-bind: nos permite modificar los atributos de los componentes HTML de forma reactiva => <img b-bind:src="" >
-- si el atributo va a ser modificado de forma dinamica se debe encerrar entre corchetes => <img v-bind:["src"]="img">

## Eventos
-- v-on: es la directiva que se utiliza para agregar eventos a los elementos => <button v-on:click="">{{ counter }}</button>
-- v-on:submit.prevent => preventDefault()
-- v-on:submit.stop => stopProtagation()

## Abreviacion de Directivas
-- Para eventos se usa @ => v-on:click === @click 
-- para atributos se usa : => v-bind:value === :value 
-- v-model === v-bind + @input

## Propiedades computadas:
-- Son propiedades que dependen de 1 o varias propiedades base y retornan un nuevo valor
-- Son totalmente reactivas, al modificar una propiedad base, se modifica la propiedad computada automaticamente
-- Estas a diferencia de los metodos no necesitan ser ejecutadas para mostrar las modificaciones

## Watcher:
-- Sirven para obervar la reactividad o cuando cambia una propiedad 
-- Deben tener el mismo nombre de la variable que quieres escuchar
-- reciben como primer argumento el nuevo valor de la variable observada
-- reciben como segundo argumento el antiguo valor de la variable observada
-- es importante que nos watcher no tengas logicas muy completas

## Condicionales
-- v-if="condition" => condiciona el elemento a mostrarse si se cumple la condicion 
-- v-else => siempre va acompaÃ±ado del v-if y renderiza el elemento en caso de que no se cumpla la condicion del v-if 

## Iteraciones
-- v-for: esta directiva nos permite hacer un ciclo for sobre un array.
-- para identificar los elementos se utiliza el atributo :key el cual debe contener un valor unico que lo permita identificar entre todos los elementos de la lista

## Props 
-- props: ["name"] => es la forma de pasar valores de un componente padre a un componente hijo

## Slot
-- slot: es otra forma de pasar contenido a un componente hijo
-- el slot le pasa al hijo todo el contenido interno

## Emit
-- this.$emit("eventName", data) => sirve para crear eventos custom
-- mediante los eventos custom podemos enviar informacion de los componentes hijos a los componentes padres

## Deep components 
-- Son componentes que no son descendientes directos del padre 